/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import type {} from '@payloadcms/db-postgres'
import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  integer,
  varchar,
  timestamp,
  serial,
  numeric,
  jsonb,
  boolean,
  text,
} from '@payloadcms/db-postgres/drizzle/pg-core'
import { sql, relations } from '@payloadcms/db-postgres/drizzle'

export const users_sessions = pgTable(
  'users_sessions',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
    expiresAt: timestamp('expires_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
  },
  (columns) => [
    index('users_sessions_order_idx').on(columns._order),
    index('users_sessions_parent_id_idx').on(columns._parentID),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [users.id],
      name: 'users_sessions_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const users = pgTable(
  'users',
  {
    id: serial('id').primaryKey(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    email: varchar('email').notNull(),
    resetPasswordToken: varchar('reset_password_token'),
    resetPasswordExpiration: timestamp('reset_password_expiration', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar('salt'),
    hash: varchar('hash'),
    loginAttempts: numeric('login_attempts').default('0'),
    lockUntil: timestamp('lock_until', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => [
    index('users_updated_at_idx').on(columns.updatedAt),
    index('users_created_at_idx').on(columns.createdAt),
    uniqueIndex('users_email_idx').on(columns.email),
  ],
)

export const media = pgTable(
  'media',
  {
    id: serial('id').primaryKey(),
    alt: varchar('alt').notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    url: varchar('url'),
    thumbnailURL: varchar('thumbnail_u_r_l'),
    filename: varchar('filename'),
    mimeType: varchar('mime_type'),
    filesize: numeric('filesize'),
    width: numeric('width'),
    height: numeric('height'),
    focalX: numeric('focal_x'),
    focalY: numeric('focal_y'),
  },
  (columns) => [
    index('media_updated_at_idx').on(columns.updatedAt),
    index('media_created_at_idx').on(columns.createdAt),
    uniqueIndex('media_filename_idx').on(columns.filename),
  ],
)

export const articles = pgTable(
  'articles',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    slug: varchar('slug'),
    content: jsonb('content').notNull(),
    published: boolean('published'),
    category: integer('category_id').references(() => categories.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => [
    uniqueIndex('articles_slug_idx').on(columns.slug),
    index('articles_category_idx').on(columns.category),
    index('articles_updated_at_idx').on(columns.updatedAt),
    index('articles_created_at_idx').on(columns.createdAt),
  ],
)

export const legal_posts_blocks_tekst = pgTable(
  'legal_posts_blocks_tekst',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    text: jsonb('text').notNull(),
    zdjecie: varchar('zdjecie').notNull(),
    blockName: varchar('block_name'),
  },
  (columns) => [
    index('legal_posts_blocks_tekst_order_idx').on(columns._order),
    index('legal_posts_blocks_tekst_parent_id_idx').on(columns._parentID),
    index('legal_posts_blocks_tekst_path_idx').on(columns._path),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [legal_posts.id],
      name: 'legal_posts_blocks_tekst_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const legal_posts_literatura = pgTable(
  'legal_posts_literatura',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    pozycja: varchar('pozycja').notNull(),
    link: varchar('link'),
  },
  (columns) => [
    index('legal_posts_literatura_order_idx').on(columns._order),
    index('legal_posts_literatura_parent_id_idx').on(columns._parentID),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [legal_posts.id],
      name: 'legal_posts_literatura_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const legal_posts = pgTable(
  'legal_posts',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    zajawka: varchar('zajawka'),
    published: boolean('published'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => [
    index('legal_posts_updated_at_idx').on(columns.updatedAt),
    index('legal_posts_created_at_idx').on(columns.createdAt),
  ],
)

export const legal_posts_rels = pgTable(
  'legal_posts_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    mediaID: integer('media_id'),
  },
  (columns) => [
    index('legal_posts_rels_order_idx').on(columns.order),
    index('legal_posts_rels_parent_idx').on(columns.parent),
    index('legal_posts_rels_path_idx').on(columns.path),
    index('legal_posts_rels_media_id_idx').on(columns.mediaID),
    foreignKey({
      columns: [columns['parent']],
      foreignColumns: [legal_posts.id],
      name: 'legal_posts_rels_parent_fk',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'legal_posts_rels_media_fk',
    }).onDelete('cascade'),
  ],
)

export const quizzes_questions_answers = pgTable(
  'quizzes_questions_answers',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    answerText: varchar('answer_text').notNull(),
    isCorrect: boolean('is_correct').default(false),
  },
  (columns) => [
    index('quizzes_questions_answers_order_idx').on(columns._order),
    index('quizzes_questions_answers_parent_id_idx').on(columns._parentID),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [quizzes_questions.id],
      name: 'quizzes_questions_answers_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const quizzes_questions = pgTable(
  'quizzes_questions',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    questionText: varchar('question_text').notNull(),
  },
  (columns) => [
    index('quizzes_questions_order_idx').on(columns._order),
    index('quizzes_questions_parent_id_idx').on(columns._parentID),
    foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [quizzes.id],
      name: 'quizzes_questions_parent_id_fk',
    }).onDelete('cascade'),
  ],
)

export const quizzes = pgTable(
  'quizzes',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    category: integer('category_id')
      .notNull()
      .references(() => categories.id, {
        onDelete: 'set null',
      }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => [
    index('quizzes_category_idx').on(columns.category),
    index('quizzes_updated_at_idx').on(columns.updatedAt),
    index('quizzes_created_at_idx').on(columns.createdAt),
  ],
)

export const categories = pgTable(
  'categories',
  {
    id: serial('id').primaryKey(),
    name: varchar('name').notNull(),
    slug: varchar('slug'),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => [
    uniqueIndex('categories_slug_idx').on(columns.slug),
    index('categories_image_idx').on(columns.image),
    index('categories_updated_at_idx').on(columns.updatedAt),
    index('categories_created_at_idx').on(columns.createdAt),
  ],
)

export const categories_rels = pgTable(
  'categories_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    categoriesID: integer('categories_id'),
  },
  (columns) => [
    index('categories_rels_order_idx').on(columns.order),
    index('categories_rels_parent_idx').on(columns.parent),
    index('categories_rels_path_idx').on(columns.path),
    index('categories_rels_categories_id_idx').on(columns.categoriesID),
    foreignKey({
      columns: [columns['parent']],
      foreignColumns: [categories.id],
      name: 'categories_rels_parent_fk',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: 'categories_rels_categories_fk',
    }).onDelete('cascade'),
  ],
)

export const theories = pgTable(
  'theories',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    slug: varchar('slug').notNull(),
    category: integer('category_id').references(() => categories.id, {
      onDelete: 'set null',
    }),
    content: jsonb('content'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => [
    uniqueIndex('theories_slug_idx').on(columns.slug),
    index('theories_category_idx').on(columns.category),
    index('theories_updated_at_idx').on(columns.updatedAt),
    index('theories_created_at_idx').on(columns.createdAt),
  ],
)

export const payload_locked_documents = pgTable(
  'payload_locked_documents',
  {
    id: serial('id').primaryKey(),
    globalSlug: varchar('global_slug'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => [
    index('payload_locked_documents_global_slug_idx').on(columns.globalSlug),
    index('payload_locked_documents_updated_at_idx').on(columns.updatedAt),
    index('payload_locked_documents_created_at_idx').on(columns.createdAt),
  ],
)

export const payload_locked_documents_rels = pgTable(
  'payload_locked_documents_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
    mediaID: integer('media_id'),
    articlesID: integer('articles_id'),
    'legal-postsID': integer('legal_posts_id'),
    quizzesID: integer('quizzes_id'),
    categoriesID: integer('categories_id'),
    theoriesID: integer('theories_id'),
  },
  (columns) => [
    index('payload_locked_documents_rels_order_idx').on(columns.order),
    index('payload_locked_documents_rels_parent_idx').on(columns.parent),
    index('payload_locked_documents_rels_path_idx').on(columns.path),
    index('payload_locked_documents_rels_users_id_idx').on(columns.usersID),
    index('payload_locked_documents_rels_media_id_idx').on(columns.mediaID),
    index('payload_locked_documents_rels_articles_id_idx').on(columns.articlesID),
    index('payload_locked_documents_rels_legal_posts_id_idx').on(columns['legal-postsID']),
    index('payload_locked_documents_rels_quizzes_id_idx').on(columns.quizzesID),
    index('payload_locked_documents_rels_categories_id_idx').on(columns.categoriesID),
    index('payload_locked_documents_rels_theories_id_idx').on(columns.theoriesID),
    foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_locked_documents.id],
      name: 'payload_locked_documents_rels_parent_fk',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_locked_documents_rels_users_fk',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'payload_locked_documents_rels_media_fk',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['articlesID']],
      foreignColumns: [articles.id],
      name: 'payload_locked_documents_rels_articles_fk',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['legal-postsID']],
      foreignColumns: [legal_posts.id],
      name: 'payload_locked_documents_rels_legal_posts_fk',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['quizzesID']],
      foreignColumns: [quizzes.id],
      name: 'payload_locked_documents_rels_quizzes_fk',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: 'payload_locked_documents_rels_categories_fk',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['theoriesID']],
      foreignColumns: [theories.id],
      name: 'payload_locked_documents_rels_theories_fk',
    }).onDelete('cascade'),
  ],
)

export const payload_preferences = pgTable(
  'payload_preferences',
  {
    id: serial('id').primaryKey(),
    key: varchar('key'),
    value: jsonb('value'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => [
    index('payload_preferences_key_idx').on(columns.key),
    index('payload_preferences_updated_at_idx').on(columns.updatedAt),
    index('payload_preferences_created_at_idx').on(columns.createdAt),
  ],
)

export const payload_preferences_rels = pgTable(
  'payload_preferences_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
  },
  (columns) => [
    index('payload_preferences_rels_order_idx').on(columns.order),
    index('payload_preferences_rels_parent_idx').on(columns.parent),
    index('payload_preferences_rels_path_idx').on(columns.path),
    index('payload_preferences_rels_users_id_idx').on(columns.usersID),
    foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_preferences.id],
      name: 'payload_preferences_rels_parent_fk',
    }).onDelete('cascade'),
    foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_preferences_rels_users_fk',
    }).onDelete('cascade'),
  ],
)

export const payload_migrations = pgTable(
  'payload_migrations',
  {
    id: serial('id').primaryKey(),
    name: varchar('name'),
    batch: numeric('batch'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => [
    index('payload_migrations_updated_at_idx').on(columns.updatedAt),
    index('payload_migrations_created_at_idx').on(columns.createdAt),
  ],
)

export const relations_users_sessions = relations(users_sessions, ({ one }) => ({
  _parentID: one(users, {
    fields: [users_sessions._parentID],
    references: [users.id],
    relationName: 'sessions',
  }),
}))
export const relations_users = relations(users, ({ many }) => ({
  sessions: many(users_sessions, {
    relationName: 'sessions',
  }),
}))
export const relations_media = relations(media, () => ({}))
export const relations_articles = relations(articles, ({ one }) => ({
  category: one(categories, {
    fields: [articles.category],
    references: [categories.id],
    relationName: 'category',
  }),
}))
export const relations_legal_posts_blocks_tekst = relations(
  legal_posts_blocks_tekst,
  ({ one }) => ({
    _parentID: one(legal_posts, {
      fields: [legal_posts_blocks_tekst._parentID],
      references: [legal_posts.id],
      relationName: '_blocks_tekst',
    }),
  }),
)
export const relations_legal_posts_literatura = relations(legal_posts_literatura, ({ one }) => ({
  _parentID: one(legal_posts, {
    fields: [legal_posts_literatura._parentID],
    references: [legal_posts.id],
    relationName: 'literatura',
  }),
}))
export const relations_legal_posts_rels = relations(legal_posts_rels, ({ one }) => ({
  parent: one(legal_posts, {
    fields: [legal_posts_rels.parent],
    references: [legal_posts.id],
    relationName: '_rels',
  }),
  mediaID: one(media, {
    fields: [legal_posts_rels.mediaID],
    references: [media.id],
    relationName: 'media',
  }),
}))
export const relations_legal_posts = relations(legal_posts, ({ many }) => ({
  _blocks_tekst: many(legal_posts_blocks_tekst, {
    relationName: '_blocks_tekst',
  }),
  literatura: many(legal_posts_literatura, {
    relationName: 'literatura',
  }),
  _rels: many(legal_posts_rels, {
    relationName: '_rels',
  }),
}))
export const relations_quizzes_questions_answers = relations(
  quizzes_questions_answers,
  ({ one }) => ({
    _parentID: one(quizzes_questions, {
      fields: [quizzes_questions_answers._parentID],
      references: [quizzes_questions.id],
      relationName: 'answers',
    }),
  }),
)
export const relations_quizzes_questions = relations(quizzes_questions, ({ one, many }) => ({
  _parentID: one(quizzes, {
    fields: [quizzes_questions._parentID],
    references: [quizzes.id],
    relationName: 'questions',
  }),
  answers: many(quizzes_questions_answers, {
    relationName: 'answers',
  }),
}))
export const relations_quizzes = relations(quizzes, ({ one, many }) => ({
  category: one(categories, {
    fields: [quizzes.category],
    references: [categories.id],
    relationName: 'category',
  }),
  questions: many(quizzes_questions, {
    relationName: 'questions',
  }),
}))
export const relations_categories_rels = relations(categories_rels, ({ one }) => ({
  parent: one(categories, {
    fields: [categories_rels.parent],
    references: [categories.id],
    relationName: '_rels',
  }),
  categoriesID: one(categories, {
    fields: [categories_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
}))
export const relations_categories = relations(categories, ({ one, many }) => ({
  image: one(media, {
    fields: [categories.image],
    references: [media.id],
    relationName: 'image',
  }),
  _rels: many(categories_rels, {
    relationName: '_rels',
  }),
}))
export const relations_theories = relations(theories, ({ one }) => ({
  category: one(categories, {
    fields: [theories.category],
    references: [categories.id],
    relationName: 'category',
  }),
}))
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: 'media',
    }),
    articlesID: one(articles, {
      fields: [payload_locked_documents_rels.articlesID],
      references: [articles.id],
      relationName: 'articles',
    }),
    'legal-postsID': one(legal_posts, {
      fields: [payload_locked_documents_rels['legal-postsID']],
      references: [legal_posts.id],
      relationName: 'legal-posts',
    }),
    quizzesID: one(quizzes, {
      fields: [payload_locked_documents_rels.quizzesID],
      references: [quizzes.id],
      relationName: 'quizzes',
    }),
    categoriesID: one(categories, {
      fields: [payload_locked_documents_rels.categoriesID],
      references: [categories.id],
      relationName: 'categories',
    }),
    theoriesID: one(theories, {
      fields: [payload_locked_documents_rels.theoriesID],
      references: [theories.id],
      relationName: 'theories',
    }),
  }),
)
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: '_rels',
    }),
  }),
)
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
  }),
)
export const relations_payload_preferences = relations(payload_preferences, ({ many }) => ({
  _rels: many(payload_preferences_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_migrations = relations(payload_migrations, () => ({}))

type DatabaseSchema = {
  users_sessions: typeof users_sessions
  users: typeof users
  media: typeof media
  articles: typeof articles
  legal_posts_blocks_tekst: typeof legal_posts_blocks_tekst
  legal_posts_literatura: typeof legal_posts_literatura
  legal_posts: typeof legal_posts
  legal_posts_rels: typeof legal_posts_rels
  quizzes_questions_answers: typeof quizzes_questions_answers
  quizzes_questions: typeof quizzes_questions
  quizzes: typeof quizzes
  categories: typeof categories
  categories_rels: typeof categories_rels
  theories: typeof theories
  payload_locked_documents: typeof payload_locked_documents
  payload_locked_documents_rels: typeof payload_locked_documents_rels
  payload_preferences: typeof payload_preferences
  payload_preferences_rels: typeof payload_preferences_rels
  payload_migrations: typeof payload_migrations
  relations_users_sessions: typeof relations_users_sessions
  relations_users: typeof relations_users
  relations_media: typeof relations_media
  relations_articles: typeof relations_articles
  relations_legal_posts_blocks_tekst: typeof relations_legal_posts_blocks_tekst
  relations_legal_posts_literatura: typeof relations_legal_posts_literatura
  relations_legal_posts_rels: typeof relations_legal_posts_rels
  relations_legal_posts: typeof relations_legal_posts
  relations_quizzes_questions_answers: typeof relations_quizzes_questions_answers
  relations_quizzes_questions: typeof relations_quizzes_questions
  relations_quizzes: typeof relations_quizzes
  relations_categories_rels: typeof relations_categories_rels
  relations_categories: typeof relations_categories
  relations_theories: typeof relations_theories
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels
  relations_payload_locked_documents: typeof relations_payload_locked_documents
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels
  relations_payload_preferences: typeof relations_payload_preferences
  relations_payload_migrations: typeof relations_payload_migrations
}

declare module '@payloadcms/db-postgres' {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema
  }
}
